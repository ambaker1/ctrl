# vutil.tcl
################################################################################
# Variable utilities for Tcl

# Copyright (C) 2023 Alex Baker, ambaker1@mtu.edu
# All rights reserved. 

# See the file "LICENSE" for information on usage, redistribution, and for a 
# DISCLAIMER OF ALL WARRANTIES.
################################################################################

# Define namespace
namespace eval ::vutil {
    namespace export default; # Set a variable if it does not exist
    namespace export lock unlock; # Hard set a Tcl variable
    namespace export tie untie; # Tie a Tcl variable to a Tcl object
    namespace export var; # Object variable class
}

# BASIC VARIABLE UTILITIES
################################################################################

# default --
#
# Soft set of a variable. Only sets the variable if it does not exist.
#
# Syntax:
# default $varName $value
#
# Arguments:
# varName       Variable name
# value         Variable default value

proc ::vutil::default {varName value} {
    upvar 1 $varName myVar
    if {![info exists myVar]} {
        set myVar $value
    } else {
        set value $myVar
    }
    return $value
}

# lock --
#
# Hard set of a variable. locked variables cannot be modified by set or default.
# Cannot lock an entire array.
#
# Syntax:
# lock $varName <$value>
#
# Arguments:
# varName       Variable to lock
# value         Value to set

proc ::vutil::lock {varName args} {
    upvar 1 $varName myVar
    if {[array exists myVar]} {
        return -code error "cannot lock an array"
    }
    # Switch for arity (allow for self-tie)
    if {[llength $args] == 0} {
        if {[info exists myVar]} {
            set value $myVar
        } else {
            return -code error "can't read \"$varName\": no such variable"
        }
    } elseif {[llength $args] == 1} {
        set value [lindex $args 0]
    } else {
        return -code error "wrong # args: should be \"lock varName ?value?\""
    }
    # Remove any existing lock trace
    if {[info exists myVar]} {
        unlock myVar
    }
    # Set value and define lock trace
    set myVar $value
    trace add variable myVar write [list ::vutil::LockTrace $value]
    return $value
}

# unlock --
#
# Unlock defined variables
#
# Syntax:
# unlock $varName ...
#
# Arguments:
# varName...    Variables to unlock

proc ::vutil::unlock {args} {
    foreach varName $args {
        upvar 1 $varName myVar
        if {[array exists myVar]} {
            return -code error "cannot unlock an array"
        }
        if {![info exists myVar]} {
            return -code error "can't unlock \"$varName\": no such variable"
        }
        set value $myVar; # Current value
        trace remove variable myVar write [list ::vutil::LockTrace $value]
    }
    return
}

# LockTrace --
#
# Private procedure, used for enforcing locked value
# Prints warning to notify user that variable is locked
#
# Syntax:
# LockTrace $value $varName $index $op
#
# Arguments:
# value         Value to lock
# varName       Variable (or array) name
# index         Index of array if variable is array
# op            Trace operation (unused)

proc ::vutil::LockTrace {value varName index op} {
    upvar 1 $varName myVar
    if {[array exists myVar]} {
        set myVar($index) $value
        puts stderr "failed to modify \"${varName}($index)\": read-only"
    } else {
        set myVar $value
        puts stderr "failed to modify \"$varName\": read-only"
    }
}

# TCLOO GARBAGE COLLECTION
################################################################################

# tie --
# 
# Tie a variable to a Tcl object, such that when the variable is modified or
# unset, by unset or by going out of scope, that the object is destroyed as well
#
# Syntax:
# tie $varName <$object>
#
# Arguments:
# varName       Reference variable representing object
# object        TclOO object

proc ::vutil::tie {varName args} {
    # Create upvar link to reference variable
    upvar 1 $varName myVar
    if {[array exists myVar]} {
        return -code error "cannot tie an array"
    }
    # Switch for arity (allow for self-tie)
    if {[llength $args] == 0} {
        if {[info exists myVar]} {
            set object $myVar
        } else {
            return -code error "can't read \"$varName\": no such variable"
        }
    } elseif {[llength $args] == 1} {
        set object [lindex $args 0]
    } else {
        return -code error "wrong # args: should be \"tie varName ?object?\""
    }
    
    # Verify that input is an object
    if {![info object isa object $object]} {
        return -code error "\"$object\" is not an object"
    }
    
    # Set variable to object (triggers any tie traces)
    set myVar $object
    
    # Verify that assignment worked. 
    # If not, variable is locked to a different value.
    if {$myVar ne $object} {
        return -code error "cannot tie \"$varName\": read-only"
    }
    
    # Create variable traces to destroy object upon write or unset of variable.
    # Also create command trace to prevent renaming of object.
    trace add variable myVar write [list ::vutil::TieVarTrace $object]
    trace add variable myVar unset [list ::vutil::TieVarTrace $object]
    trace add command $object rename ::vutil::TieObjTrace
    
    # Return the value (like with "set")
    return $object
}

# untie --
# 
# Untie variables from their respective Tcl objects.
#
# Syntax:
# untie $varName ...
#
# Arguments:
# varName...    Variables to unlock

proc ::vutil::untie {args} {
    foreach varName $args {
        upvar 1 $varName myVar
        if {[array exists myVar]} {
            return -code error "cannot untie an array"
        }
        if {![info exists myVar]} {
            return -code error "can't untie \"$myVar\": no such variable"
        }
        RemoveTie myVar $myVar
    }
    return
}

# RemoveTie --
#
# Private command to remove tie traces from a variable
#
# Syntax:
# RemoveTie $varName $objName
# 
# Arguments:
# varName       Variable name to remove traces from
# objName       Name of object to remove them from

proc ::vutil::RemoveTie {varName object} {
    upvar 1 $varName myVar
    trace remove variable myVar write [list ::vutil::TieVarTrace $object]
    trace remove variable myVar unset [list ::vutil::TieVarTrace $object]
    catch {trace remove command $object rename ::vutil::TieObjTrace}
}

# TieVarTrace --
#
# Removes traces and destroys associated Tcl object
#
# Syntax:
# TieVarTrace $object $varName $index $op
#
# Arguments:
# varName       Variable (or array) name
# index         Index of array if variable is array
# op            Trace operation (unused)

proc ::vutil::TieVarTrace {object varName index op} {
    upvar 1 $varName myVar
    # Remove tie and return if setting to self
    if {[info exists myVar]} {
        if {[array exists myVar]} {
            RemoveTie myVar($index) $object
            if {$myVar($index) eq $object} {
                return
            }
        } else {
            RemoveTie myVar $object
            if {$myVar eq $object} {
                return
            }
        }
    }
    # Destroy the object if it still exists.
    if {[info object isa object $object]} {
        $object destroy
    }
}

# TieObjTrace --
#
# For some reason, the rename trace doesn't work well with TclOO objects.
# Instead, to ensure proper use, return a fatal error.

proc ::vutil::TieObjTrace {args} {
    puts stderr "FATAL: cannot rename tied objects"
    exit 2
}

# Garbage Collection Superclasses
################################################################################

# ::vutil::GC --
#
# Superclass for objects with garbage collection. Not exported.
#
# Public methods:
# $object --> $varName      Copy object to new variable.

::oo::class create ::vutil::GC {
    # Constructor ties object to gc variable.
    # Call "next $varName" in subclass constructor.    
    constructor {varName} {
        uplevel 1 [list ::vutil::tie $varName [self]]
    }
    
    # CopyObject (-->) --
    #
    # Copy object to new variable (returns new object name)
    #
    # Syntax:
    # my CopyObject $varName
    # $object --> $varName
    #
    # Arguments:
    # varName       Variable to copy to.
    
    method CopyObject {varName} {
        uplevel 1 [list ::vutil::tie $varName [oo::copy [self]]]
    }
    method --> {varName} {
        tailcall my CopyObject $varName
    }
    export -->
}

# var --
#
# Object-variable class. 
# Value is stored within object variable "myValue".
#
# Syntax:
# var new $varName <$value>
#
# Arguments:
# varName       Variable for garbage collection
# value         Value of variable. Default "".
#
# Public methods:
# $varObj                   No method (unknown), returns value.
# $varObj . $op $arg ...    Value of object, passed through mathop.
# $varObj = $value          Value assignment.
# $varObj .= $op $arg ...   Assign to value of math operator.
# $varObj := $expr          Expression assignment.
# $varObj ::= $body         Evaluation assignment.
# $varObj | $arg ...        Evaluate methods in temp object, return result.

::oo::class create ::vutil::var {
    superclass ::vutil::GC; # includes --> method
    variable myValue; # Value of object
    constructor {varName {value ""}} {
        my SetValue $value
        next $varName
    }
    
    # ValidateValue --
    # 
    # Validate value stored in var.
    
    method ValidateValue {value} {
        return $value
    }
    
    # GetValue () --
    # GetOpValue (.) --
    # 
    # Get the value stored in the object.
    #
    # Syntax:
    # my GetValue
    # $object
    
    method GetValue {} {
        return $myValue
    }
    method unknown {args} {
        if {[llength $args] == 0} {
            return [my GetValue]
        }
        next {*}$args
    }
    unexport unknown
    
    # GetOpValue (.) --
    #
    # Get the value, passed through a math operator.
    #
    # Syntax:
    # my GetOpValue $op $arg ...
    # $object . $op $arg ...
    #
    # Arguments:
    # op            Valid math operator
    # arg ...       Additional arguments for math operator
    
    method GetOpValue {op args} {
        ::tcl::mathop::$op [my GetValue] {*}$args
    }
    method . {op args} {
        my GetOpValue $op {*}$args
    }
    export .
    
    # SetValue (=) --
    #
    # Set the value stored in the object, and return object name.
    #
    # Syntax:
    # my SetValue $value
    # $object = $value
    # 
    # Arguments:
    # value         Value to set
    
    method SetValue {value} {
        set myValue [my ValidateValue $value]
        return [self]
    }
    method = {value} {
        my SetValue $value
    }
    export =
    
    # Other assignment operators (.= := ::=) --
    # 
    # Assign to result of mathop, expression, or script.
    #
    # Syntax:
    # $object .= $op $arg ...
    # $object := $expr
    # $object ::= $body
    #
    # Arguments:
    # op            Valid math operator.
    # arg ...       Additional arguments for math operator.
    # expr          Math expression to evaluate.
    # body          Tcl script to evaluate.
    
    method .= {op args} {
        my SetValue [my GetOpValue $op {*}$args]
    }
    method := {expr} {
        my SetValue [my Uplevel 1 [list expr $expr]]
    }
    method ::= {body} {
        my SetValue [my Uplevel 1 $body]
    }
    export .= := ::=
    
    # Uplevel --
    # 
    # Evaluate the script in the caller, creating an alias for the object.
    # Used with operators := and ::=
    #
    # Syntax:
    # my Uplevel $level $body
    #
    # Arguments:
    # level         Level to evaluate at
    # body          Script to evaluate
    
    method Uplevel {level body} {
        # Set up alias for self.
        set oldAlias [interp alias {} $]
        interp alias {} $ {} [self]
        # Evaluate script, and, finally, reset alias.
        try {
            uplevel [incr level] $body
        } finally {
            interp alias {} $ {} {*}$oldAlias
        }
    }
    
    # TempObject (|) --
    # 
    # Copy to temp object, evaluate method, and return object value or result.
    #
    # Syntax:
    # my TempObject $method $arg ...
    # 
    # Arguments:
    # method        Method name
    # arg ...       Arguments for method
    
    method TempObject {method args} {
        my CopyObject temp
        set result [uplevel 1 [list $temp $method {*}$args]]
        if {$result eq $temp} {
            set result [$temp]
        }
        return $result
    }
    method | {method args} {
        tailcall my TempObject $method {*}$args
    }
    export |
}

# Finally, provide the package
package provide vutil @VERSION@
