# vutil.tcl
################################################################################
# Variable utilities for Tcl

# Copyright (C) 2023 Alex Baker, ambaker1@mtu.edu
# All rights reserved. 

# See the file "LICENSE" for information on usage, redistribution, and for a 
# DISCLAIMER OF ALL WARRANTIES.
################################################################################

# Define namespace
namespace eval ::vutil {
    namespace export default; # Set a variable if it does not exist
    namespace export lock unlock; # Hard set a Tcl variable
    namespace export tie untie; # Tie a Tcl variable to a Tcl object
}

# BASIC VARIABLE UTILITIES
################################################################################

# default --
#
# Soft set of a variable. Only sets the variable if it does not exist.
#
# Syntax:
# default $varName $value
#
# Arguments:
# varName       Variable name
# value         Variable default value

proc ::vutil::default {varName value} {
    upvar 1 $varName var
    if {![info exists var]} {
        set var $value
    } else {
        set value $var
    }
    return $value
}

# lock --
#
# Hard set of a variable. locked variables cannot be modified by set or default.
# Cannot lock an entire array.
#
# Syntax:
# lock $varName <$value>
#
# Arguments:
# varName       Variable to lock
# value         Value to set

proc ::vutil::lock {varName args} {
    upvar 1 $varName var
    if {[array exists var]} {
        return -code error "cannot lock an array"
    }
    # Switch for arity (allow for self-tie)
    if {[llength $args] == 0} {
        if {[info exists var]} {
            set value $var
        } else {
            return -code error "can't read \"$varName\": no such variable"
        }
    } elseif {[llength $args] == 1} {
        set value [lindex $args 0]
    } else {
        return -code error "wrong # args: should be \"lock varName ?value?\""
    }
    # Remove any existing lock trace
    if {[info exists var]} {
        unlock var
    }
    # Set value and define lock trace
    set var $value
    trace add variable var write [list ::vutil::LockTrace $value]
    return $value
}

# unlock --
#
# Unlock defined variables
#
# Syntax:
# unlock $varName ...
#
# Arguments:
# varName...    Variables to unlock

proc ::vutil::unlock {args} {
    foreach varName $args {
        upvar 1 $varName var
        if {[array exists var]} {
            return -code error "cannot unlock an array"
        }
        if {![info exists var]} {
            return -code error "can't unlock \"$varName\": no such variable"
        }
        set value $var; # Current value
        trace remove variable var write [list ::vutil::LockTrace $value]
    }
    return
}

# LockTrace --
#
# Private procedure, used for enforcing locked value
# Prints warning to notify user that variable is locked
#
# Syntax:
# LockTrace $value $varName $index $op
#
# Arguments:
# value         Value to lock
# varName       Variable (or array) name
# index         Index of array if variable is array
# op            Trace operation (unused)

proc ::vutil::LockTrace {value varName index op} {
    upvar 1 $varName var
    if {[array exists var]} {
        set var($index) $value
        puts stderr "failed to modify \"${varName}($index)\": read-only"
    } else {
        set var $value
        puts stderr "failed to modify \"$varName\": read-only"
    }
}

# TCLOO GARBAGE COLLECTION
################################################################################

# tie --
# 
# Tie a variable to a Tcl object, such that when the variable is modified or
# unset, by unset or by going out of scope, that the object is destroyed as well
#
# Syntax:
# tie $varName <$object>
#
# Arguments:
# varName       Reference variable representing object
# object        TclOO object

proc ::vutil::tie {varName args} {
    # Create upvar link to reference variable
    upvar 1 $varName var
    if {[array exists var]} {
        return -code error "cannot tie an array"
    }
    # Switch for arity (allow for self-tie)
    if {[llength $args] == 0} {
        if {[info exists var]} {
            set object $var
        } else {
            return -code error "can't read \"$varName\": no such variable"
        }
    } elseif {[llength $args] == 1} {
        set object [lindex $args 0]
    } else {
        return -code error "wrong # args: should be \"tie varName ?object?\""
    }
    
    # Verify that input is an object
    if {![info object isa object $object]} {
        return -code error "\"$object\" is not an object"
    }
    
    # Set variable to object (triggers any tie traces)
    set var $object
    
    # Verify that assignment worked. 
    # If not, variable is locked to a different value.
    if {$var ne $object} {
        return -code error "cannot tie \"$varName\": read-only"
    }
    
    # Create variable trace to destroy object upon write or unset of variable.
    # Also create command trace to prevent renaming of object.
    trace add variable var {write unset} [list ::vutil::TieVarTrace $object]
    trace add command $object rename ::vutil::TieObjTrace
    
    # Return the value (like with "set")
    return $object
}

# untie --
# 
# Untie variables from their respective Tcl objects.
#
# Syntax:
# untie $varName ...
#
# Arguments:
# varName...    Variables to unlock

proc ::vutil::untie {args} {
    foreach varName $args {
        upvar 1 $varName var
        if {[array exists var]} {
            return -code error "cannot untie an array"
        }
        if {![info exists var]} {
            return -code error "can't untie \"$var\": no such variable"
        }
        RemoveTie var $var
    }
    return
}

# RemoveTie --
#
# Private command to remove tie traces from a variable
#
# Syntax:
# RemoveTie $varName $objName
# 
# Arguments:
# varName       Variable name to remove traces from
# objName       Name of object to remove them from

proc ::vutil::RemoveTie {varName object} {
    upvar 1 $varName var
    trace remove variable var {write unset} [list ::vutil::TieVarTrace $object]
    catch {trace remove command $object rename ::vutil::TieObjTrace}
}

# TieVarTrace --
#
# Removes traces and destroys associated Tcl object
#
# Syntax:
# TieVarTrace $object $varName $index $op
#
# Arguments:
# varName       Variable (or array) name
# index         Index of array if variable is array
# op            Trace operation (unused)

proc ::vutil::TieVarTrace {object varName index op} {
    upvar 1 $varName var
    # Remove tie and return if setting to self
    if {[info exists var]} {
        if {[array exists var]} {
            RemoveTie var($index) $object
            if {$var($index) eq $object} {
                return
            }
        } else {
            RemoveTie var $object
            if {$var eq $object} {
                return
            }
        }
    }
    # Destroy the object if it still exists.
    if {[info object isa object $object]} {
        $object destroy
    }
}

# TieObjTrace --
#
# For some reason, the rename trace doesn't work well with TclOO objects.
# Instead, to ensure proper use, return a fatal error.

proc ::vutil::TieObjTrace {args} {
    puts stderr "FATAL: cannot rename tied objects"
    exit 2
}

# ::vutil::GC --
#
# Superclass for objects with garbage collection. Not exported.
#
# Methods:
# -->       Copy object to new reference variable.

::oo::class create ::vutil::GC {
    # Constructor ties object to gc variable.
    # Call "next $varName" in subclass constructor.    
    constructor {varName} {
        uplevel 1 [list ::vutil::tie $varName [self]]
    }
    
    # CopyObject (-->) --
    #
    # Copy object to new variable (returns new object name)
    #
    # Syntax:
    # my CopyObject $varName
    # $obj --> $varName
    #
    # Arguments:
    # varName       Variable to copy to.
    
    method CopyObject {varName} {
        uplevel 1 [list ::vutil::tie $varName [oo::copy [self]]]
    }
    method --> {varName} {
        tailcall my CopyObject $varName
    }
    export -->
}

# Finally, provide the package
package provide vutil @VERSION@